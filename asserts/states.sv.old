

`define IDLE  (7'b000_0000)
`define S1    (7'b000_0001)
`define S2    (7'b000_0010)
`define S3    (7'b000_0100)
`define S4    (7'b000_1000)
`define S5    (7'b001_0000)
`define S6    (7'b010_0000)
`define S7    (7'b100_0000)

`define IS_IDLE  (st === 7'b000_0000)
`define IS_S1    (st === 7'b000_0001)
`define IS_S2    (st === 7'b000_0010)
`define IS_S3    (st === 7'b000_0100)
`define IS_S4    (st === 7'b000_1000)
`define IS_S5    (st === 7'b001_0000)
`define IS_S6    (st === 7'b010_0000)
`define IS_S7    (st === 7'b100_0000)


module FSM(input clk, rstn, start, output [6:0] state);
  reg [6:0] st;

  always @(negedge rstn) begin
    st = `IDLE;
  end

  always @(posedge clk) begin
    case (st)
      `IDLE:     st <= start;
      `S1:       st <= `S2; 
      `S2:       st <= `S3; 
      `S3:       st <= `S4;
      `S4:       st <= `S5; 
      `S5:       st <= `S6; 
      `S6:       st <= `IDLE;
    endcase
  end

  assign state = st;


  default disable iff (!rstn);

  assert property( disable iff (0) @(posedge clk) !rstn |-> !st);

  covergroup cgFSM;
    START: coverpoint start;
    STATE: coverpoint st {
      bins s1 = ( `IDLE => `S1 );
      bins s2 = ( `S1 => `S2 );
      bins s3 = ( `S2 => `S3 );
      bins s4 = ( `S3 => `S4 );
      bins s5 = ( `S4 => `S5 );
      bins s6 = ( `S5 => `S6 );
      bins s6_idle = ( `S6 => `IDLE );
    }
    STXST: cross START,STATE;
    
  endgroup
/*
  sequence s_IDLE_S1;
      `IS_IDLE ##1 `IS_S1;
  endsequence
  sequence s_IDLE_S2;
      `IS_IDLE ##1 `IS_S2;
  endsequence
  sequence s_IDLE_S3;
      `IS_IDLE ##1 `IS_S3;
  endsequence

  cover property( S_IDLE_S1 );
*/
  assert property(@(posedge clk) $onehot0(st));

  assert property(@(posedge clk) `IS_IDLE && start |=> `IS_S1)
    else $error("Failed to transition from idle to s1 on start");
  assert property(@(posedge clk) `IS_S1 |=> `IS_S2)
    else $error("Failed to transition from s1 to s2");
  assert property(@(posedge clk) `IS_S2 |=> `IS_S3)
    else $error("Failed to transition from s2 to s3");
  assert property(@(posedge clk) `IS_S3 |=> `IS_S4)
    else $error("Failed to transition from s3 to s4");
  assert property(@(posedge clk) `IS_S4 |=> `IS_S5)
    else $error("Failed to transition from s4 to s5");
  assert property(@(posedge clk) `IS_S5 |=> `IS_S6)
    else $error("Failed to transition from s5 to s6");
  assert property(@(posedge clk) `IS_S6 |=> `IS_IDLE)
    else $error("Failed to transition from s6 to idle");

endmodule


module tb;
  reg clk,rstn,start;
  wire [6:0] state;
 
  always #5 clk = ~clk;
 
  FSM fsm(clk,rstn,start,state);

  initial begin
    {clk,rstn,start} <= 0;
    $monitor("%03t: start=%0d state=%0x",$time, start, state);
    #20 rstn <= 1;
    @(posedge clk);
    @(posedge clk); start <= 1;
    @(posedge clk); start <= 0;
    @(posedge clk);
    @(posedge clk);
    @(posedge clk);
    @(posedge clk);
    @(posedge clk);
    @(posedge clk);
    @(posedge clk);
    @(posedge clk);
    @(posedge clk);
    $finish;
  end
endmodule
